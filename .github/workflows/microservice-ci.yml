name: Microservice CI Pipeline

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build and deploy'
        required: false
        type: choice
        options:
          - adservice
          - cartservice
          - checkoutservice
          - currencyservice
          - emailservice
          - frontendservice
          - loadgenerator
          - paymentservice
          - productcatalogservice
          - recommendationservice
          - shippingservice
          - shoppingassistantservice
  push:
    branches:
      - main
    paths:
      - 'src/adservice/**'
      - 'src/cartservice/**'
      - 'src/checkoutservice/**'
      - 'src/currencyservice/**'
      - 'src/emailservice/**'
      - 'src/frontendservice/**'
      - 'src/loadgenerator/**'
      - 'src/paymentservice/**'
      - 'src/productcatalogservice/**'
      - 'src/recommendationservice/**'
      - 'src/shippingservice/**'
      - 'src/shoppingassistantservice/**'

jobs:
  detect-services:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Determine changed services
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ ! -z "${{ github.event.inputs.service }}" ]; then
            # If manually triggered with a specific service
            SERVICES_JSON="[\"${{ github.event.inputs.service }}\"]"
          else
            # Get changed files and extract unique service names
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} || git diff --name-only HEAD~1 HEAD)
            SERVICES=$(echo "$CHANGED_FILES" | grep -o "src/[^/]*" | sort -u | cut -d'/' -f2 | jq -R -s -c 'split("\n")[:-1]')
            SERVICES_JSON="$SERVICES"
          fi
          echo "matrix={\"service\":$SERVICES_JSON}" >> $GITHUB_OUTPUT
          echo "Found services: $SERVICES_JSON"

  build-and-push:
    needs: detect-services
    if: needs.detect-services.outputs.matrix != '{\"service\":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-services.outputs.matrix)}}
      fail-fast: false  # Continue with other services if one fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set build context
        id: set-context
        run: |
          if [ "${{ matrix.service }}" = "cartservice" ]; then
            echo "context=./src/cartservice/src" >> $GITHUB_OUTPUT
          else
            echo "context=./src/${{ matrix.service }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate image tags
        id: meta
        run: |
          SHA_TAG="${{ github.sha }}"
          SHORT_SHA="${SHA_TAG:0:7}"
          echo "sha_tag=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "tags=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest,${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.set-context.outputs.context }}
          load: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ steps.meta.outputs.sha_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ steps.meta.outputs.sha_tag }}'
          format: 'table'
          exit-code: '0' # set to '1' in production or if you want pipeline to fail
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Push image to Docker Hub
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.set-context.outputs.context }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ steps.meta.outputs.sha_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Output Image Tags
        run: |
          echo "Successfully pushed images for ${{ matrix.service }}:"
          echo "  - ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest"
          echo "  - ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ steps.meta.outputs.sha_tag }}"

  update-helm-chart:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout k8s-manifests-repo
        uses: actions/checkout@v4
        with:
          repository: yutee/k8s-manifests-repo
          token: ${{ secrets.PAT_TOKEN }}
          path: manifests-repo

      - name: Update Helm values.yaml with sed
        working-directory: manifests-repo/boutique-app
        run: |
          IMAGE_TAG="${{ steps.meta.outputs.sha_tag }}"

          # Update the tag field in values.yaml
          sed -i "s/tag: .*/tag: $IMAGE_TAG/" values.yaml

          echo "Updated values.yaml:"
          cat values.yaml

      - name: Commit and Push Changes
        working-directory: manifests-repo
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${PAT_TOKEN}@github.com/yutee/k8s-manifests-repo.git
          git add boutique-app/values.yaml
          git commit -m "Update image tag to ${{ steps.meta.outputs.sha_tag }}"
          git push origin main