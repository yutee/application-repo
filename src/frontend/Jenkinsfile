pipeline {
    agent { label 'ubuntu' }

    environment {
        SERVICE_NAME = "frontend"
        DOCKER_REPO = "jothamcloud" 
        DOCKER_IMAGE = "${DOCKER_REPO}/${SERVICE_NAME}"
        VERSION = "${BUILD_NUMBER}"
        SONARQUBE_URL = "http://75.101.245.14:9000"
        PATH = "/opt/sonar-scanner/sonar-scanner-4.8.0.2856-linux/bin:${env.PATH}"
        GITEA_URL = "gitea.ajotham.link"
        MANIFESTS_REPO = "k8-manifests"
        DEPLOYMENT_FILENAME = "frontend.yml"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Code Analysis') {
            steps {
                withVault(configuration: [timeout: 60, vaultCredentialId: 'vault-approle', engineVersion: 2, vaultUrl: 'https://vault.ajotham.link'],
                        vaultSecrets: [[path: 'secret/sonarqube', secretValues: [[envVar: 'SONAR_TOKEN', vaultKey: 'token']]]]) {
                    sh """
                        sonar-scanner \
                            -Dsonar.projectKey=${SERVICE_NAME} \
                            -Dsonar.projectName=${SERVICE_NAME} \
                            -Dsonar.sources=src/frontend \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.exclusions=**/*.java \
                            -Dsonar.sourceEncoding=UTF-8
                    """
                }
            }
        }

        stage('Build Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${VERSION} -f src/frontend/Dockerfile src/frontend"
                }
            }
        }

        stage('Initialize Trivy DB') {
            steps {
                sh"""
                   trivy --cache-dir /var/lib/trivy image --download-db-only
                   sleep 5
                """
            }
        }

        stage('Trivy Scan') {
            steps {
                sh """
                    trivy image \
                        --cache-dir /var/lib/trivy \
                        ${DOCKER_IMAGE}:${VERSION} \
                        --severity HIGH,CRITICAL \
                        --exit-code 0
                """
            }
        }

        stage('Push Image') {
            steps {
                withVault(configuration: [timeout: 60, vaultCredentialId: 'vault-approle', engineVersion: 2, vaultUrl: 'https://vault.ajotham.link'],
                        vaultSecrets: [[path: 'secret/docker', 
                                      secretValues: [
                                          [envVar: 'DOCKER_USERNAME', vaultKey: 'username'],
                                          [envVar: 'DOCKER_TOKEN', vaultKey: 'token']
                                      ]]]) {
                    sh """
                        echo "\${DOCKER_TOKEN}" | docker login -u "\${DOCKER_USERNAME}" --password-stdin
                        # Add error checking
                        if [ \$? -eq 0 ]; then
                            docker push ${DOCKER_IMAGE}:${VERSION}
                            docker tag ${DOCKER_IMAGE}:${VERSION} ${DOCKER_IMAGE}:latest
                            docker push ${DOCKER_IMAGE}:latest
                        else
                            echo "Docker login failed"
                            exit 1
                        fi
                    """
                }
            }
        }

        stage('Update Manifest and Create Pull Request') {
            steps {
                script {
                    withVault(configuration: [timeout: 60, vaultCredentialId: 'vault-approle', engineVersion: 2, vaultUrl: 'https://vault.ajotham.link'],
                            vaultSecrets: [[path: 'secret/gitea', 
                                        secretValues: [
                                            [envVar: 'GITEA_USERNAME', vaultKey: 'username'],
                                            [envVar: 'GITEA_PASSWORD', vaultKey: 'password']
                                        ]]]) {
                        
                        // Checkout the repository
                        checkout([$class: 'GitSCM',
                                branches: [[name: "main"]],
                                userRemoteConfigs: [[url: "https://gitea.ajotham.link/Jotham/micro-services-demo.git"]]])
                        
                        // Generate a unique branch name
                        def branchName = "update-frontend-image-v${VERSION}"
                        
                        // Create and switch to new branch
                        sh "git checkout -b ${branchName}"
                        
                        // Update the image using yq or sed
                        sh """
                                sed -i "s|image: .*|image: ${DOCKER_IMAGE}:${VERSION}|" k8-manifests/${DEPLOYMENT_FILENAME}
                        """
                        
                        // Configure git
                        sh """
                            git config --global user.email "jenkins@ajotham.link"
                            git config --global user.name "Jenkins"
                        """
                        
                        // Stage and commit changes
                        sh """
                            git add k8-manifests/${DEPLOYMENT_FILENAME}
                            git commit -m "feat(frontend): Update image to v${VERSION}"
                        """
                        
                        // Push the new branch
                        sh """
                            # URL encode the username and password
                            USERNAME_ENCODED=\$(printf "%s" "\${GITEA_USERNAME}" | jq -sRr @uri)
                            PASSWORD_ENCODED=\$(printf "%s" "\${GITEA_PASSWORD}" | jq -sRr @uri)
                            
                            # Construct the URL with encoded credentials
                            REPO_URL="https://\${USERNAME_ENCODED}:\${PASSWORD_ENCODED}@gitea.ajotham.link/Jotham/micro-services-demo.git"
                            
                            # Set the remote URL and push
                            git remote set-url origin "\${REPO_URL}"
                            git push --set-upstream origin ${branchName}
                        """
                        
                        def requestBody = """
                            {
                                "title": "Update frontend image to v${VERSION}",
                                "body": "Automated PR: Updated frontend deployment to use image version ${VERSION}\\n\\nChanges made:\\n- Updated frontend image to ${DOCKER_IMAGE}:${VERSION}",
                                "head": "${branchName}",
                                "base": "main"
                            }
                        """
                        
                        // Using single quotes for curl command to prevent groovy interpolation of sensitive data
                        sh '''
                            curl -X POST \
                                -H "Content-Type: application/json" \
                                -u "${GITEA_USERNAME}:${GITEA_PASSWORD}" \
                                -d \'''' + requestBody + '''\' \
                                "https://gitea.ajotham.link/api/v1/repos/Jotham/micro-services-demo/pulls"
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            sh """
                docker logout || true
                docker rmi ${DOCKER_IMAGE}:${VERSION} || true
                docker rmi ${DOCKER_IMAGE}:latest || true
            """
            cleanWs()
        }
    }
}